#+title: Common settings
#+author: Amo DelBello
#+description: Common settings shared by GUI and terminal config
#+startup: content

* Variables and Modes
#+begin_src emacs-lisp
  (use-package emacs
    :config
    ;; Use C-h for delete-backward-char
    (global-set-key (kbd "C-h") 'delete-backward-char)

    ;; Set custom prefix key ("C-z")
    (define-prefix-command 'z-map)
    (global-set-key (kbd "C-z") 'z-map)

    (global-display-line-numbers-mode 0)
    (fset 'yes-or-no-p 'y-or-n-p)
    (recentf-mode 1)
    (savehist-mode 1)
    (whitespace-mode -1)
    (delete-selection-mode 1)
    (blink-cursor-mode 0)
    (electric-pair-mode 1)
    (turn-on-visual-line-mode)
    (visual-line-mode 1)
    (which-key-mode 1)
    (put 'narrow-to-region 'disabled nil)

    (setq save-interprogram-paste-before-kill t
          desktop-save-mode nil
          vc-follow-symlinks nil
          require-final-newline t
          enable-recursive-minibuffers t
          python-indent-guess-indent-offset-verbose nil
          custom-safe-themes t
          ispell-program-name (dot-env-get 'ISPELL_PATH "/usr/bin/ispell")
          dictionary-server "dict.org")

    (setq-default indent-tabs-mode nil
                  global-tab-line-mode nil
                  tab-line-mode nil
                  tab-bar-mode nil
                  line-spacing 0.3
                  fill-column 100
                  sentence-end-double-space nil
                  whitespace-line-column 110)

    ;; Do not show those confusing warnings when installing packages
    ;; https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/
    (add-to-list 'display-buffer-alist
                 '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
                 (display-buffer-no-window)
                 (allow-no-window . t)))

    ;; Blink modeline instead of ring bell
    (setq ring-bell-function
          (lambda ()
            (let ((orig-fg (face-foreground 'mode-line)))
              (set-face-foreground 'mode-line "Magenta")
              (run-with-idle-timer 0.1 nil
                                   (lambda (fg) (set-face-foreground 'mode-line fg))
                                   orig-fg))))

    ;; Use forward slashes to distinguish duplicate files
    (require 'uniquify)
    (setq uniquify-buffer-name-style 'forward)
#+end_src

* Functions for custom bindings
#+begin_src emacs-lisp
  ;; Open file based from .emacs.d directory
  (defun amo/open-emacs-config-file (path)
    "Open a file within .emacs.d

  PATH is path to file inside .emacs.d"
    (interactive)
    (find-file (concat user-emacs-directory path)))

  ;; Exports README.org
  (defun amo/export-readme-file ()
    "Export README.org"
    (interactive)
    (let ((current-file-name (or (buffer-file-name) (buffer-name)))
          (is-file-p (buffer-file-name)))
      (find-file (concat user-emacs-directory "README.org"))
      (org-export-dispatch)
      (if is-file-p
          (find-file current-file-name)
        (switch-to-buffer current-file-name))))

  (defun amo/copy-rectangle-to-kill-ring (Begin End)
    "Copy region as column (rectangle region) to `kill-ring'
  (Because the native copy-rectangle-as-kill doesn't seem to work)
  See also: `kill-rectangle', `copy-to-register'.

  URL `http://xahlee.info/emacs/emacs/emacs_copy_rectangle_text_to_clipboard.html'
  Version: 2016-07-17"
    ;; extract-rectangle suggested by YoungFrog, 2012-07-25
    (interactive "r")
    (require 'rect)
    (kill-new (mapconcat #'identity (extract-rectangle Begin End) "\n")))

  ;; Un-highlight region after mark jump
  (defun amo/exchange-point-and-mark ()
    "Deactivates mark after exchanging point and mark"
    (interactive)
    (exchange-point-and-mark)
    (deactivate-mark))

  ;; Transpose chars and words backwards
  (defun amo/transpose-chars-backwards ()
    "Just like transpose-chars but goes the other way"
    (interactive)
    (transpose-chars -1))

  (defun amo/transpose-words-backwards ()
    "Just like transpose-words but goes the other way"
    (interactive)
    (transpose-words -1))

  ;; Move char after point to end of next word
  (defun amo/transpose-char-to-end-of-next-word ()
    "Move char at point to the end of the next word.
  Use case is to push closing parentheses out to contain subsequent characters
  when a function is typed and the closing parenthesis is automatically added.
  Skips over periods, quotes, and closing parentheses."
    (interactive)

    ;; helpers
    (defun amo/should-move-forward-one-char (c)
      (or
       (char-equal (following-char) ?\")
       (char-equal (following-char) ?\))))
    (defun amo/should-move-forward-one-word (c)
      (char-equal (following-char) ?.))
    (defun amo/should-move (c)
      (or
       (amo/should-move-forward-one-char c)
       (amo/should-move-forward-one-word c)))

    (forward-char)
    (let ((start (point))
          (end nil))
      (save-excursion
        (forward-word)
        (while (amo/should-move (following-char))
          (if (amo/should-move-forward-one-char (following-char))
              (forward-char)
            (forward-word)))
        (setq end (point)))
      (transpose-subr 'forward-char (- end start)))
    (backward-char))

  ;; Move lines up and down
  (defmacro amo/save-column (&rest body)
    `(let ((column (current-column)))
       (unwind-protect
           (progn ,@body)
         (move-to-column column))))
  (put 'save-column 'lisp-indent-function 0)

  (defun amo/move-line-up ()
    (interactive)
    (amo/save-column
     (transpose-lines 1)
     (forward-line -2)))

  (defun amo/move-line-down ()
    (interactive)
    (amo/save-column
     (forward-line 1)
     (transpose-lines 1)
     (forward-line -1)))

  ;; Toggle capitalization of character at point
  (defun amo/toggle-capitalization ()
    "Toggle the capitalization of the character at point."
    (interactive)
    (let ((char (char-after)))
      (cond ((eq char (upcase char)) (progn (amo/downcase-char 1) (forward-char)))
            ((eq char (downcase char)) (progn (upcase-char 1) (forward-char)))
            (t (message "No character at point.")))))

  (defun amo/downcase-char (arg)
    "Lowercasify ARG chars starting from point.  Point doesn't move."
    (interactive "p")
    (save-excursion
      (downcase-region (point) (progn (forward-char arg) (point)))))

  (defun amo/toggle-line-numbers ()
    "Toggle the display of line numbers"
    (interactive)
    (if (eq nil global-display-line-numbers-mode)
        (global-display-line-numbers-mode 1)
      (global-display-line-numbers-mode 0)))

  ;; Copy current file path & line number to kill ring
  (defun amo/copy-file-path-and-line-number (arg)
    "Copy current file path & line number to kill ring

  If called with the universal argument, provide full path.
  Otherwise use the projectile project root if present"
    (interactive "P")
    (let* ((file-path (or (buffer-file-name) (buffer-name)))
           (project-path
            (if (and (null arg) (projectile-project-root))
                (concat (file-name-nondirectory (directory-file-name (projectile-project-root)))
                        "/" (string-replace
                             (or (projectile-project-root) "") ""
                             file-path))
              file-path)))
      (kill-new (concat project-path
                        ":" (number-to-string (line-number-at-pos))))
      (message "Copied current path and line number to kill ring!")))

  ;; From https://github.com/larstvei/dot-emacs
  ;; just-one-space removes all whitespace around a point - giving it a negative argument it removes newlines as well.
  ;; We wrap a interactive function around it to be able to bind it to a key.
  ;; In Emacs 24.4 cycle-spacing was introduced, and it works like just-one-space,
  ;; but when run in succession it cycles between one, zero and the original number of spaces.
  (defun cycle-spacing-delete-newlines ()
    "Removes whitespace before and after the point."
    (interactive)
    (if (version< emacs-version "24.4")
        (just-one-space -1)
      (cycle-spacing -1)))

  (defun amo/repeat-current-window-right ()
    "Close other windows, duplicate current window to the right"
    (interactive)
    (delete-other-windows)
    (split-window-right))

  (defun amo/repeat-current-window-below ()
    "Close other windows, duplicate current window below"
    (interactive)
    (delete-other-windows)
    (split-window-below))

#+end_src

* use-package Style Bindings
#+begin_src emacs-lisp
  :bind (("C-z g" . amo/export-readme-file)
         ("C-z l" . amo/toggle-line-numbers)
         ("C-z p" . amo/copy-file-path-and-line-number)
         ("M-'" . end-of-visual-line)
         ("C-x C-x" . amo/exchange-point-and-mark)
         ("C-S-t" . amo/transpose-chars-backwards)
         ("M-T" . amo/transpose-words-backwards)
         ("C-S-f" . amo/transpose-char-to-end-of-next-word)
         ("M-z" . zap-up-to-char)
         ("C-c t =" . text-scale-increase)
         ("C-c t -" . text-scale-decrease)
         ("C-z '" . indent-new-comment-line)
         ("C-x r M-w" . amo/copy-rectangle-to-kill-ring)
         ("M-/" . cycle-spacing-delete-newlines)
         ("C-c 1" . dictionary-lookup-definition)
         ("C-c 2" . amo/repeat-current-window-below)
         ("C-c 3" . amo/repeat-current-window-right)))
#+end_src

* Traditional-Style Bindings
Necessary when the bound function requires arguments
#+begin_src emacs-lisp
  (keymap-global-set "C-z s e" (lambda () (interactive) (amo/open-emacs-config-file ".env")))
  (keymap-global-set "C-z s c s" (lambda () (interactive) (amo/open-emacs-config-file "common/settings.org")))
  (keymap-global-set "C-z s c p" (lambda () (interactive) (amo/open-emacs-config-file "common/packages.org")))
  (keymap-global-set "C-z s c f" (lambda () (interactive) (amo/open-emacs-config-file "common/functions.el")))
  (keymap-global-set "C-z s g s" (lambda () (interactive) (amo/open-emacs-config-file "gui/settings.org")))
  (keymap-global-set "C-z s t s" (lambda () (interactive) (amo/open-emacs-config-file "terminal/settings.org")))
#+end_src
* Hooks
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'amo/whitespace-cleanup)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook (lambda () (flyspell-mode -1)))
  (add-hook 'prog-mode-hook 'subword-mode)
#+end_src
* dired
#+begin_src emacs-lisp
  (use-package dired
    :config  (setq dired-kill-when-opening-new-dired-buffer t
                   dired-listing-switches "-al")

    ;; from https://www.emacswiki.org/emacs/DiredSortDirectoriesFirst
    (defun mydired-sort ()
      "Sort dired listings with directories first."
      (save-excursion
        (let (buffer-read-only)
          (forward-line 2) ;; beyond dir. header
          (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
        (set-buffer-modified-p nil)))
    (defadvice dired-readin
        (after dired-after-updating-hook first () activate)
      "Sort dired listings with directories first before adding marks."
      (mydired-sort))

    :hook ((dired-mode . dired-hide-details-mode))
    :bind (:map dired-mode-map
                ("C-o" . nil)))
#+end_src

* Advice
#+begin_src emacs-lisp
  ;; Copy whole line to kill ring when no active region
  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position) (line-beginning-position 2)))))
#+end_src
