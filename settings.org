#+title: Custom emacs settings
#+author: Amo DelBello
#+description: "NO! The beard stays. You go."
#+startup: content

* Packages
** Ace Window
:PROPERTIES:
:REPO:     [[https://github.com/abo-abo/ace-window]]
:DESCRIPTION: Quickly switch windows in Emacs
:END:
  #+begin_src emacs-lisp
    (use-package ace-window
      :straight t
      :bind
      (("C-o" . ace-window)
       ("C-x o" . ace-window))
      :config
      (defvar aw-dispatch-always nil)
      (setq aw-scope 'frame))
  #+end_src
** Avy
:PROPERTIES:
:REPO:     [[https://github.com/abo-abo/avy]]
:END:
  #+begin_src emacs-lisp
    (use-package avy
      :straight t
      :bind (("C-'" . avy-goto-char)
             ("C-;" . avy-goto-char-2)
             :map org-mode-map
             ("C-'" . nil)))
  #+end_src
** Company
:PROPERTIES:
:REPO:     https://github.com/company-mode/company-mode
:DOCS:     https://company-mode.github.io/
:DESCRIPTION: Modular in-buffer completion framework for Emacs
:END:
  #+begin_src emacs-lisp
    (use-package company
      :straight t
      :config
      (global-company-mode))
  #+end_src
** Consult
:PROPERTIES:
:REPO:     https://github.com/minad/consult
:DESCRIPTION: Search and navigation commands based on the Emacs completion function completing-read
:END:
  #+begin_src emacs-lisp
    ;; Example configuration for Consult
    (use-package consult
      :straight t

      ;; Replace bindings. Lazily loaded due by `use-package'.
      :bind (;; C-c bindings in `mode-specific-map'
             ("C-s" . consult-line)
             ("C-c M-x" . consult-mode-command)
             ("C-c h" . consult-history)
             ("C-c k" . consult-kmacro)
             ("C-c m" . consult-man)
             ("C-c i" . consult-info)
             ([remap Info-search] . consult-info)
             ;; C-x bindings in `ctl-x-map'
             ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
             ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
             ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
             ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
             ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
             ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
             ;; Custom M-# bindings for fast register access
             ("M-#" . consult-register-load)
             ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
             ("C-M-#" . consult-register)
             ;; Other custom bindings
             ("M-y" . consult-yank-pop)                ;; orig. yank-pop
             ;; M-g bindings in `goto-map'
             ("M-g e" . consult-compile-error)
             ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
             ("M-g g" . consult-goto-line)             ;; orig. goto-line
             ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
             ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
             ("M-g m" . consult-mark)
             ("M-g k" . consult-global-mark)
             ("M-g i" . consult-imenu)
             ("M-g I" . consult-imenu-multi)
             ;; M-s bindings in `search-map'
             ("M-s d" . consult-find)
             ("M-s D" . consult-locate)
             ("M-s g" . consult-grep)
             ("M-s G" . consult-git-grep)
             ("M-s r" . consult-ripgrep)
             ("M-s l" . consult-line)
             ("M-s L" . consult-line-multi)
             ("M-s k" . consult-keep-lines)
             ("M-s u" . consult-focus-lines)
             ;; Isearch integration
             ("M-s e" . consult-isearch-history)
             :map isearch-mode-map
             ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
             ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
             ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
             ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
             ;; Minibuffer history
             :map minibuffer-local-map
             ("M-s" . consult-history)                 ;; orig. next-matching-history-element
             ("M-r" . consult-history))                ;; orig. previous-matching-history-element

      ;; Enable automatic preview at point in the *Completions* buffer. This is
      ;; relevant when you use the default completion UI.
      :hook (completion-list-mode . consult-preview-at-point-mode)

      ;; The :init configuration is always executed (Not lazy)
      :init

      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)

      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :config
      (consult-customize
       consult-theme :preview-key '(:debounce 0.2 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-bookmark consult--source-file-register
       consult--source-recent-file consult--source-project-recent-file
       ;; :preview-key "M-."
       :preview-key '(:debounce 0.4 any)))
  #+end_src

** Crux
:PROPERTIES:
:REPO:     https://github.com/bbatsov/crux
:DOCS:     [[https://emacsredux.com/blog/2016/01/30/crux/]]
:DESCRIPTION: A Collection of Ridiculously Useful eXtensions for Emacs
:END:
  #+begin_src emacs-lisp
    (use-package crux
      :straight t
      :bind
      (("s-o" . crux-smart-open-line-above)
       ("M-o" . crux-smart-open-line)
       ("s-r" . crux-recentf-find-file)
       ("C-c D" . crux-delete-file-and-buffer)
       ("C-c d" . crux-duplicate-current-line-or-region)
       ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)
       ("C-c r" . crux-rename-file-and-buffer)
       ("s-j" . crux-top-join-line)
       ("s-k" . crux-kill-whole-line)
       ("<C-backspace>" . crux-kill-line-backwards)))
  #+end_src

** Magit
:PROPERTIES:
:REPO:     https://github.com/magit/magit
:DOCS:     https://magit.vc/
:DESCRIPTION: It's Magit! A Git Porcelain inside Emacs.
:END:
  #+begin_src emacs-lisp
    (use-package magit
      :straight t
      :bind
      (("C-x g" . magit)))
  #+end_src
** Marginalia
:PROPERTIES:
:DESCRIPTION: Enable rich annotations in the minibuffer
:REPO:     https://github.com/minad/marginalia
:END:
  #+begin_src emacs-lisp
    (use-package marginalia
      :straight t
      :init
      (marginalia-mode))
  #+end_src

** orderless
:PROPERTIES:
:DESCRIPTION: Emacs completion style that matches multiple regexps in any order
:REPO:     https://github.com/oantolin/orderless
:END:
  #+begin_src emacs-lisp
    (use-package orderless
      :straight t
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
  #+end_src

** Org Mode
:PROPERTIES:
:DOCS:     https://orgmode.org/
:END:
  #+begin_src emacs-lisp
    (defun amo/org-mode-hook ()
      (org-indent-mode 1)

      ;; For some reason org-mode doesn't respect visual-line-mode when it loads.
      (visual-line-mode 0)
      (visual-line-mode 1))
    (add-hook 'org-mode-hook 'amo/org-mode-hook)

    ;; Disable checkdoc in org-mode source blocks
    (defun amo/disable-fylcheck-in-org-src-block ()
      (setq-local flycheck-disabled-checkers '(emacs-lisp emacs-lisp-checkdoc)))
    (add-hook 'org-src-mode-hook 'amo/disable-fylcheck-in-org-src-block)

    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (define-key org-mode-map (kbd "C-c m") 'counsel-org-goto)

    (setq org-list-demote-modify-bullet
          '(("-" . "+") ("+" . "*") ("*" . "-"))
          org-list-allow-alphabetical t
          org-M-RET-may-split-line '((default . nil))
          org-use-tag-inheritance nil
          org-hide-emphasis-markers t
          org-directory (dot-env-get 'ORG_DIRECTORY_PATH "~/.emacs.d/org-directory")
          org-agenda-files (list org-directory)
          org-sprint-file (concat org-directory "/sprints.org")
          org-standup-file (concat org-directory "/standups.org")
          org-issue-file (concat org-directory "/issues.org")
          org-meeting-file (concat org-directory "/meeting-notes.org")
          org-union-file (concat org-directory "/union-notes.org")
          org-lists-file (concat org-directory "/lists.org")
          org-archive-location (concat org-directory "/_archive/%s_archive::"))

    (setq org-capture-templates
          '(("s"
             "Sprint"
             entry
             (file org-sprint-file)
             "* %? %^G \nDEADLINE: %^t SCHEDULED: %^t %^{SCOPED_STORY_POINTS}p\n\n** Issues\n" :empty-lines-after 1 :prepend t)
            ("p"
             "Sprint Issue"
             entry
             (file org-sprint-file)
             "*** %? %^G \n %^{STORY_POINTS}p %^{ORIGINALLY_SCOPED}p %^{COMPLETED}p" :empty-lines 1 :prepend t)
            ("i"
             "Issue Note"
             entry
             (file+headline org-issue-file "Issue Items")
             "** %? %^G \n%T \n%i \n" :empty-lines 1 :prepend t)
            ("t"
             "Standup Note"
             entry
             (file+headline org-standup-file "Standup Items")
             "** %T Notes:\n%?\n%i\n" :empty-lines-after 1 :prepend t)
            ("m"
             "Meeting Note"
             entry
             (file+headline org-meeting-file "Meeting Items")
             "** %?\n%T\n%i\n" :empty-lines-after 1 :prepend t)
            ("u"
             "Union Note"
             entry
             (file+headline org-union-file "Meeting Items")
             "** %T %?\n%i\n" :empty-lines-after 1)
            ("e"
             "Emacs Idea"
             checkitem
             (file+headline org-lists-file "Emacs Ideas")
             "[ ] %?" :prepend t)
            ("k"
             "Keyboard Idea"
             checkitem
             (file+headline org-lists-file "Keyboard Ideas")
             "[ ] %?" :prepend t)
            ("r"
             "Interesting Albums"
             item
             (file+headline org-lists-file "Interesting Albums")
             "%?")))
  #+end_src
** org-superstar-mode
:PROPERTIES:
:REPO:     https://github.com/integral-dw/org-superstar-mode
:END:
  #+begin_src emacs-lisp
    (use-package org-superstar
      :straight t
      :hook
      (org-mode . org-superstar-mode))
  #+end_src
** Popper
:PROPERTIES:
:REPO:     https://github.com/karthink/popper
:END:
  #+begin_src emacs-lisp
    (use-package popper
      :straight t
      :bind (("s-3"   . popper-toggle-latest)
             ("s-4"   . popper-cycle)
             ("s-5" . popper-toggle-type))
      :init
      (setq popper-reference-buffers
            '("\\*format-all-errors\\*"
              "\\*flycheck errors\\*"
              "\\*cider-error\\*"
              "\\*cider-scratch\\*"
              "\\*Messages\\*"
              "\\*Warnings\\*"
              "\\*Compile-Log\\*"
              "\\*Completions\\*"
              "\\*Backtrace\\*"
              "\\*TeX Help\\*"
              "Output\\*$"
              "\\*Async Shell Command\\*"
              "^pop-"
              help-mode
              compilation-mode)
            popper-mode-line ""

            ;; Make popper buffers 1/2 window height
            popper-window-height (lambda (win)
                                   (fit-window-to-buffer
                                    win
                                    (floor (frame-height) 2))))
      (popper-mode +1)
      (popper-echo-mode +1)
      (defun amo/add-popper-status-to-modeline ()
        "If buffer is a popper-type buffer, display POP in the modeline,
      in a doom-modeline friendly way"
        (if (popper-display-control-p (buffer-name))
            (add-to-list 'mode-line-misc-info "POP")
          (setq mode-line-misc-info (remove "POP" mode-line-misc-info))))
      (add-hook 'buffer-list-update-hook 'amo/add-popper-status-to-modeline))
  #+end_src
** Projectile
:PROPERTIES:
:REPO:     https://github.com/bbatsov/projectile
:DOCS:     https://docs.projectile.mx/projectile/index.html
:END:
  #+begin_src emacs-lisp
    (use-package projectile
      :straight t
      :config
      (projectile-global-mode)
      (setq projectile-completion-system 'ivy)
      :bind (("s-p" . projectile-command-map)
             ("C-c p" . projectile-command-map)))
  #+end_src
** Vertico
:PROPERTIES:
:REPO:     https://github.com/minad/vertico
:DESCRIPTION: Performant and minimalistic vertical completion UI based on the default completion system.
:END:
  #+begin_src emacs-lisp
    (use-package vertico
      :straight t
      :init
      (vertico-mode))
  #+end_src
** vertico-directory
:PROPERTIES:
:REPO:     https://github.com/minad/vertico/blob/main/extensions/vertico-directory.el
:DESCRIPTION: Commands for Ido-like directory navigation.
:END:
  #+begin_src emacs-lisp
    (use-package vertico-directory
      :straight t
      :after vertico
      :bind (:map vertico-map
                  ("C-j" . vertico-directory-enter)
                  ("DEL" . vertico-directory-delete-char)
                  ("M-DEL" . vertico-directory-delete-word))
      ;; Tidy shadowed file names
      :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
  #+end_src
** which-key
:PROPERTIES:
:REPO:     https://github.com/justbur/emacs-which-key
:END:
  #+begin_src emacs-lisp
    (use-package which-key
      :straight t
      :config
      (which-key-mode))
  #+end_src

** YASnippet
:PROPERTIES:
:REPO:     https://github.com/joaotavora/yasnippet
:DESCRIPTION: A template system for Emacs
:END:
  #+begin_src emacs-lisp
    (use-package yasnippet
      :straight t
      :config
      (yas-global-mode)
      (setq yas-snippet-dirs
            '("~/.emacs.d/snippets"))
      (use-package yasnippet-snippets
        :straight t))
  #+end_src

* Programming
** Tree-sitter
:PROPERTIES:
:INFO:     https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
:DOCS:     https://emacs-tree-sitter.github.io/getting-started/
:END:
  #+begin_src emacs-lisp
    (setq treesit-language-source-alist
     '((python "https://github.com/tree-sitter/tree-sitter-python")))

    ;; (setq major-mode-remap-alist
    ;;  '((python-mode . python-ts-mode)))
  #+end_src

  #+RESULTS:
  : ((emacs-lisp-mode . elisp-ts-mode) (python-mode . python-ts-mode))

** treesit-auto
:PROPERTIES:
:REPO:     https://github.com/renzmann/treesit-auto
:DESCRIPTION: Automatic installation, usage, and fallback for tree-sitter major modes in Emacs 29
:END:
  #+begin_src emacs-lisp
    (use-package treesit-auto
      :straight t
      :config
      (setq treesit-auto-install 'prompt)
      (global-treesit-auto-mode))
  #+end_src
** Eglot
:PROPERTIES:
:REPO:     https://github.com/joaotavora/eglot
:DESCRIPTION: A client for Language Server Protocol servers
:END:
  #+begin_src emacs-lisp
    (use-package eglot
      :straight t
      :defer t
      :hook ((python-ts-mode . eglot-ensure)))
  #+end_src

* Custom Bindings
   #+begin_src emacs-lisp
     ;; Set prefix key ("C-z")
     ;; "C-z" is the custom prefix key
     (define-prefix-command 'z-map)
     (global-set-key (kbd "C-z") 'z-map)

     ;; Open settings.org (this file)
     (defun amo/open-settings-file ()
       "Open settings.org"
       (interactive)
       (find-file "~/.emacs.d/settings.org"))
     (define-key z-map (kbd "s") #'amo/open-settings-file)

     ;; Reload config
     (defun amo/reload-config ()
       "Reload configuration"
       (interactive)
       ;; (dot-env-load)
       (load-file "~/.emacs.d/init.el"))
     (define-key z-map (kbd "r") #'amo/reload-config)

     ;; Restart Emacs
     (define-key z-map (kbd "C-z r") #'restart-emacs)

     ;; Open customize-themes
     (define-key z-map (kbd "t") #'customize-themes)

     ;; Start eshell
     (define-key z-map (kbd "e") #'eshell)

     ;; Open Calendar
     (define-key z-map (kbd "c") #'calendar)

     ;; Open notes directory
     (defun amo/open-notes-file ()
       "Open notes file"
       (interactive)
       (find-file org-directory))
     (define-key z-map (kbd "n") #'amo/open-notes-file)

     ;; Shrink window vertically
     (global-set-key (kbd "C-x %") (kbd "C-u -1 C-x ^"))

     ;; One line scroll
     (global-set-key (kbd "C-s-p") #'scroll-down-line)
     (global-set-key (kbd "C-s-n") #'scroll-up-line)

     ;; Move point to other window immediately after split
     (defun amo/split-window-below ()
       "Create a new window below and move point to new window."
       (interactive)
       (split-window-below)
       (other-window 1))

     (defun amo/split-window-horizontally()
       "Create a new window to the right and move point to new window."
       (interactive)
       (split-window-horizontally)
       (other-window 1))

     (global-set-key (kbd "C-x 2") #'amo/split-window-below)
     (global-set-key (kbd "C-x 3") #'amo/split-window-horizontally)

     ;; Un-highlight region after mark jump
     (defun amo/exchange-point-and-mark ()
       "Deactivates mark after exchanging point and mark"
       (interactive)
       (exchange-point-and-mark)
       (deactivate-mark))
     (global-set-key (kbd "C-x C-x") #'amo/exchange-point-and-mark)

     ;; Kill current buffer and delete current window
     (global-set-key (kbd "C-x K") #'kill-buffer-and-window)

     ;; Comment line
     (global-set-key (kbd "s-/") #'comment-line)

     ;; Transpose chars and words backwards
     (defun amo/transpose-chars-backwards ()
       "Just like transpose-chars but goes the other way"
       (interactive)
       (transpose-chars -1))
     (global-set-key (kbd "C-S-t") #'amo/transpose-chars-backwards)
     (defun amo/transpose-words-backwards ()
       "Just like transpose-words but goes the other way"
       (interactive)
       (transpose-words -1))
     (global-set-key (kbd "M-T") #'amo/transpose-words-backwards) ;; not sure why "M-S-t" doesn't work here

     ;; Move char after point to end of next word
     (defun amo/transpose-char-to-end-of-next-word ()
       "Move char at point to the end of the next word.
     Use case is to push closing parentheses out to contain subsequent characters
     when a function is typed and the closing parenthesis is automatically added.
     Skips over periods, quotes, and closing parentheses."
       (interactive)

       ;; helpers
       (defun amo/should-move-forward-one-char (c)
         (or
          (char-equal (following-char) ?\")
          (char-equal (following-char) ?\))))
       (defun amo/should-move-forward-one-word (c)
         (char-equal (following-char) ?.))
       (defun amo/should-move (c)
         (or
          (amo/should-move-forward-one-char c)
          (amo/should-move-forward-one-word c)))

       (forward-char)
       (let ((start (point))
             (end nil))
         (save-excursion
           (forward-word)
           (while (amo/should-move (following-char))
             (if (amo/should-move-forward-one-char (following-char))
                 (forward-char)
               (forward-word)))
           (setq end (point)))
         (transpose-subr 'forward-char (- end start)))
       (backward-char))
     (global-set-key (kbd "C-S-f") #'amo/transpose-char-to-end-of-next-word)

     ;; Move lines up and down
     (defmacro amo/save-column (&rest body)
       `(let ((column (current-column)))
          (unwind-protect
              (progn ,@body)
            (move-to-column column))))
     (put 'save-column 'lisp-indent-function 0)

     (defun amo/move-line-up ()
       (interactive)
       (amo/save-column
        (transpose-lines 1)
        (forward-line -2)))

     (defun amo/move-line-down ()
       (interactive)
       (amo/save-column
        (forward-line 1)
        (transpose-lines 1)
        (forward-line -1)))
     (global-set-key (kbd "M-<down>") #'amo/move-line-down)
     (global-set-key (kbd "M-<up>") #'amo/move-line-up)
  #+end_src

* General Configuration
   #+begin_src emacs-lisp
     (set-frame-font amo/font nil t)
     (set-face-attribute 'fixed-pitch nil :font amo/font)
     (set-face-attribute 'variable-pitch nil :font amo/font)
     (set-face-attribute 'default nil :height amo/base-font-size)
     (desktop-save-mode 1)
     (fset 'yes-or-no-p 'y-or-n-p)
     (blink-cursor-mode 0)
     (electric-pair-mode 1)
     (delete-selection-mode 1)
     (global-hl-line-mode t)
     (recentf-mode 1)
     (whitespace-mode -1)
     (global-display-line-numbers-mode 1)

     (setq scroll-step 1
           recentf-max-menu-items 25
           recentf-max-saved-items 25
           save-interprogram-paste-before-kill t
           auto-mode-alist (append '(("\\.cl$" . lisp-mode))
                                   auto-mode-alist)
           inferior-lisp-program "/usr/local/bin/sbcl"
           font-latex-fontify-script nil
           auto-save-default nil
           create-lockfiles nil
           undo-tree-enable-undo-in-region t
           delete-by-moving-to-trash t
           dired-kill-when-opening-new-dired-buffer t
           comment-column 64

           ;; Save backups to a central location
           make-backup-files t
           backup-directory-alist '(("." . "~/.emacs.d/backups"))
           delete-old-versions -1
           version-control t
           vc-make-backup-files t
           auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

     (setq-default indent-tabs-mode nil
                   org-catch-invisible-edits 'show
                   global-tab-line-mode nil
                   tab-line-mode nil
                   tab-bar-mode nil
                   line-spacing 0.3
                   fill-column 100
                   sentence-end-double-space nil
                   visual-line-mode t
                   whitespace-line-column 110)

     ;; Set the right mode when you create a buffer
     (setq-default major-mode
                   (lambda () (if buffer-file-name
                                  (fundamental-mode)
                                (let ((buffer-file-name (buffer-name)))
                                  (set-auto-mode)))))

     ;; Blink modeline instead of ring bell
     (setq ring-bell-function
           (lambda ()
             (let ((orig-fg (face-foreground 'mode-line)))
               (set-face-foreground 'mode-line "Magenta")
               (run-with-idle-timer 0.1 nil
                                    (lambda (fg) (set-face-foreground 'mode-line fg))
                                    orig-fg))))

     (custom-set-variables '(ediff-split-window-function (quote split-window-horizontally)))
     (custom-set-variables '(ediff-window-setup-function (quote ediff-setup-windows-plain)))
   #+end_src
* Hooks
** before-save-hook
#+begin_src emacs-lisp
(defun amo/before-save-actions ()
  (whitespace-cleanup)
  (delete-trailing-whitespace))
(add-hook 'before-save-hook #'amo/before-save-actions)
#+end_src

* Advice
** kill-ring-save
Copy whole line to kill ring when no active region
#+begin_src emacs-lisp
  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position) (line-beginning-position 2)))))
#+end_src

* Appearance
   #+begin_src emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
   #+end_src
** Modus Themes
- Repo :: https://github.com/protesilaos/modus-themes
  #+begin_src emacs-lisp
    (use-package modus-themes
      :straight t)
  #+end_src
