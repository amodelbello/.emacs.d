#+title: Custom emacs settings
#+author: Amo DelBello
#+description: ""
#+startup: content

* Packages
** Ace Window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind
    (("C-x o" . ace-window)
     ("s-w" . ace-window))
    :config 
    (defvar aw-dispatch-always nil)
    (setq aw-scope 'frame)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+end_src
** Atomic Chrome
#+begin_src emacs-lisp
  (use-package atomic-chrome
    :ensure t
    :config (atomic-chrome-start-server))
  (setq atomic-chrome-buffer-open-style 'frame)
#+end_src
** Avy
#+begin_src emacs-lisp
    (use-package avy
      :ensure t
      :bind ("C-'" . avy-goto-char-2))
#+end_src
** Beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    (setq beacon-blink-duration 0.5)
    (setq beacon-blink-delay 0.1))
#+end_src
** buffer-move
#+begin_src emacs-lisp
  (use-package buffer-move
    :ensure t
    :bind
    (("<C-s-up>" . buf-move-up)
     ("<C-s-down>" . buf-move-down)
     ("<C-s-left>" . buf-move-left)
     ("<C-s-right>" .  buf-move-right)))
#+end_src
** Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode)
    (setq company-idle-delay 0.4)
    (setq company-show-numbers t)
    (setq company-tooltip-limit 10)
    (setq company-minimum-prefix-length 2)
    (setq company-tooltip-align-annotations t)
    (setq company-tooltip-flip-when-above nil)
    (custom-set-variables
     '(company-quick-access-modifier 'super))
    )
#+end_src
** Crux
#+begin_src emacs-lisp
  (use-package crux
    :ensure t
    :bind
    (("s-o" . crux-smart-open-line-above)
     ("M-o" . crux-smart-open-line)
     ("s-r" . crux-recentf-find-file)
     ("C-c D" . crux-delete-file-and-buffer)
     ("C-c d" . crux-duplicate-current-line-or-region)
     ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)
     ("C-c r" . crux-rename-file-and-buffer)
     ("s-j" . crux-top-join-line)
     ("s-k" . crux-kill-whole-line)
     ("<C-backspace>" . crux-kill-line-backwards)))
#+end_src
** diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode)
    :hook
    ((dired-mode . diff-hl-dired-mode)
     (magit-pre-refresh . diff-hl-magit-pre-refresh)
     (magit-post-refresh . diff-hl-magit-post-refresh)))
#+end_src
** easy-kill
#+begin_src emacs-lisp
  (use-package easy-kill
    :ensure t
    :bind
    ([remap kill-ring-save] . easy-kill))
#+end_src
** exec-path-from-shell
#+begin_src emacs-lisp
  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
      :ensure t
      :config
      (exec-path-from-shell-initialize)))
#+end_src
** expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-=" . er/expand-region))
#+end_src
** Eyebrowse
#+begin_src emacs-lisp
  (use-package eyebrowse
    :ensure t
    :config 
    (eyebrowse-mode))
#+end_src
** gnuplot
#+begin_src emacs-lisp
  (use-package gnuplot
    :ensure t
    :ensure-system-package gnuplot
    :config
    (add-to-list 'auto-mode-alist '("\\.gp?\\'" . gnuplot-mode)))
#+end_src
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src
** ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
	     (quote (("default"
		      ("org" (mode . org-mode))
		      ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
		      ("web" (or (mode . web-mode) (mode . js2-mode)))
		      ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
		      ("mu4e" (or
			       (mode . mu4e-compose-mode)
			       (name . "\*mu4e\*")
			       ))
		      ("programming" (or
				      (mode . emacs-lisp-mode)
				      (mode . lisp-mode)
				      (mode . clojure-mode)
				      (mode . clojurescript-mode)
				      (mode . python-mode)
				      (mode . c-mode)
				      (mode . c++-mode)))
		      ("text" (mode . text-mode))
		      ("magit" (mode . magit-mode))
		      ("dired" (mode . dired-mode))
		      ("emacs" (or
				(name . "^\\*scratch\\*$")
				(name . "^\\*Messages\\*$")))
		      ))))
       (add-hook 'ibuffer-mode-hook
		 (lambda ()
		   (ibuffer-auto-mode 1)
		   (ibuffer-switch-to-saved-filter-groups "default")))

       ;; Don't show filter groups if there are no buffers in that group
       (setq ibuffer-show-empty-filter-groups nil)
#+end_src
** Ivy & friends
*** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind
    (("C-x b" . ivy-switch-buffer)
     ("C-c C-r" . ivy-resume)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))
#+end_src
*** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     ("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("<f1> f" . counsel-describe-function)
     ("<f1> v" . counsel-describe-variable)
     ("<f1> l" . counsel-find-library)
     ("<f2> i" . counsel-info-lookup-symbol)
     ("<f2> u" . counsel-unicode-char)
     ("C-c g" . counsel-git) ; will override the keybinding for `magit-file-dispatch'
     ("C-c j" . counsel-git-grep)
     ("C-c a" . counsel-ag)
     ("C-x l" . counsel-locate)
     ("M-y" . counsel-yank-pop)
     ("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     :map minibuffer-local-map
       ("C-r" . counsl-minibuffer-history)))
#+end_src

*** Swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    (("C-s" . swiper-isearch)
     ("C-r" . swiper-isearch)
     :map read-expression-map
     ("C-r" . counsel-expression-history)))

#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind
    (("C-x g" . magit)))
#+end_src
** nlinum
#+begin_src emacs-lisp
  (use-package nlinum
    :ensure t
    :config
    (global-nlinum-mode))
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook
    (org-mode . org-bullets-mode))
#+end_src
** Paredit
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'lisp-mode-hook 'paredit-mode)
    (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
    (add-hook 'clojure-mode-hook 'paredit-mode)
    (add-hook 'clojurescript-mode-hook 'paredit-mode)
    (add-hook 'clojurec-mode-hook 'paredit-mode)
    (add-hook 'cider-repl-mode-hook 'paredit-mode))
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    :bind (("s-p" . projectile-command-map)
	   ("C-c p" . projectile-command-map)))
#+end_src
** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist
	`((".*" . ,temporary-file-directory)))
    (setq undo-tree-auto-save-history t)
    :diminish (undo-tree-mode))
#+end_src
** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t 
    :config
    (which-key-mode))
#+end_src
** YASnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode)
    (setq yas-snippet-dirs 
	  '("~/.emacs.d/snippets"))
    (use-package yasnippet-snippets
      :ensure t))
#+end_src
* Themes
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+end_src
** Spacemacs
#+begin_src emacs-lisp
  (use-package spacemacs-common
    :ensure spacemacs-theme
    :config
    (load-theme 'spacemacs-light t))
#+end_src
* Config
** Quick Open
#+begin_src emacs-lisp
  (global-set-key (kbd "\e\es")
		  (lambda ()
		    (interactive)
		    (find-file "~/.emacs.d/settings.org")))

  (global-set-key (kbd "\e\ei")
		  (lambda ()
		    (interactive)
		    (find-file "~/.emacs.d/init.el")))

  (global-set-key (kbd "\e\ek") 'customize-themes)

  (global-set-key (kbd "\e\ec")
		  (lambda ()
		    (interactive)
		    (set-cursor-color 'magenta)))
#+end_src
** Font Size
#+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVu Sans Mono-14" nil t)
  (setq-default line-spacing 0.3)
  (setq-default fill-column 80)
  (setq-default sentence-end-double-space nil)
  (setq-default whitespace-line-column 110)

  ;; Because the line-spacing above messes up calc
  (add-hook 'calc-mode-hook
	    (lambda ()
	      (setq line-spacing 0)))
  (add-hook 'calc-trail-mode-hook
	    (lambda ()
	      (setq line-spacing 0)))
#+END_SRC
** Window Things
#+begin_src emacs-lisp
  (setq-default global-tab-line-mode nil)
  (setq-default tab-line-mode nil)
  (setq-default tab-bar-mode nil)
  (toggle-scroll-bar -1)

  ; easily shrink window vertically
  (global-set-key (kbd "C-x %") (kbd "C-u -1 C-x ^"))
#+end_src
** Misc
#+begin_src emacs-lisp
  (desktop-save-mode 1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (tool-bar-mode -1)
  (blink-cursor-mode 0)

  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)

  ;; (setq ring-bell-function 'ignore)
  ;; Blink modeline instead of ring bell
  (setq ring-bell-function
      (lambda ()
	(let ((orig-fg (face-foreground 'mode-line)))
	  (set-face-foreground 'mode-line "Magenta")
	  (run-with-idle-timer 0.1 nil
			       (lambda (fg) (set-face-foreground 'mode-line fg))
			       orig-fg))))

  (setq-default visual-line-mode t)
  (setq-default org-catch-invisible-edits 'show)
  (setq-default prelude-whitespace nil)
  (setq save-interprogram-paste-before-kill t)
  (setq auto-mode-alist (append '(("\\.cl$" . lisp-mode))
				auto-mode-alist))

  (setq inferior-lisp-program "/usr/local/bin/sbcl")

  ;;keep cursor at same position when scrolling
  ;;(setq scroll-preserve-screen-position 1)
  ;;scroll window up/down by one line
  ;; (global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
  ;; (global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
  ;; (global-set-key (kbd "C-M-q") 'query-replace)

  ;; Spell check
  (setq-default ispell-program-name "/usr/local/bin/aspell")

  ;; allow remembering risky variables
  (defun risky-local-variable-p (sym &optional _ignored) nil)
#+end_src

