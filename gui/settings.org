#+title: GUI Config
#+author: Amo DelBello
#+startup: content

* General Configuration
** Variables and Modes
#+begin_src emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; Maximize frames when created
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Use C-H for help prefix
  (global-set-key (kbd "C-S-h") 'help-command)

  (set-frame-font amo/font nil t)
  (set-face-attribute 'fixed-pitch nil :font amo/font)
  (set-face-attribute 'variable-pitch nil :font amo/font)
  (set-face-attribute 'default nil :height amo/base-font-size)

  (global-hl-line-mode t)
  (menu-bar-mode (string-to-number (dot-env-get 'MENU_BAR_MODE "1")))

  (setq warning-minimum-level :error
        default-directory (dot-env-get 'DEFAULT_DIRECTORY "~/")
        scroll-step 1
        compilation-window-height 24
        frame-inhibit-implied-resize t
        recentf-max-menu-items 25
        recentf-max-saved-items 25
        inferior-lisp-program "/usr/local/bin/sbcl"
        font-latex-fontify-script nil
        auto-save-default nil
        create-lockfiles nil
        delete-by-moving-to-trash t
        comment-column 64
        eshell-scroll-show-maximum-output nil

        ;; Change mode based on file extension
        auto-mode-alist (append '(("\\.cl$" . lisp-mode)
                                  ("\\.mod$" . go-mod-ts-mode))
                                auto-mode-alist))
  (setq-default org-catch-invisible-edits 'show)

  ;; Save backups to a central location
  (let ((backup-directory (dot-env-get 'BACKUP_DIRECTORY "~/.emacs.d/backups/")))
    (setq backup-directory-alist `(("." . ,backup-directory))
          make-backup-files t
          delete-old-versions -1
          version-control t
          vc-make-backup-files t
          indent-tabs-mode nil))

  ;; Rewrite the split-window-sensibly function
  ;; Reverse its preference and essentially prefer splitting side-by-side.
  ;; https://github.com/SophieBosio/.emacs.d
  (defun split-window-sensibly-prefer-horizontal (&optional window)
    "Based on `split-window-sensibly', but prefers to split WINDOW side-by-side."
    (let ((window (or window (selected-window))))
      (or (and (window-splittable-p window t)
               ;; Split window horizontally
               (with-selected-window window
                 (split-window-right)))
          (and (window-splittable-p window)
               ;; Split window vertically
               (with-selected-window window
                 (split-window-below)))
          (and
           ;; If WINDOW is the only usable window on its frame (it is
           ;; the only one or, not being the only one, all the other
           ;; ones are dedicated) and is not the minibuffer window, try
           ;; to split it horizontally disregarding the value of
           ;; `split-height-threshold'.
           (let ((frame (window-frame window)))
             (or
              (eq window (frame-root-window frame))
              (catch 'done
                (walk-window-tree (lambda (w)
                                    (unless (or (eq w window)
                                                (window-dedicated-p w))
                                      (throw 'done nil)))
                                  frame)
                t)))
           (not (window-minibuffer-p window))
           (let ((split-width-threshold 0))
             (when (window-splittable-p window t)
               (with-selected-window window
                 (split-window-right))))))))

  (defun split-window-really-sensibly (&optional window)
    (let ((window (or window (selected-window))))
      (if (> (window-total-width window) (* 2 (window-total-height window)))
          (with-selected-window window (split-window-sensibly-prefer-horizontal window))
        (with-selected-window window (split-window-sensibly window)))))

  (setq split-window-preferred-function 'split-window-really-sensibly)

  ;; Reuse the inactive window instead of creating a new one.
  ;; Setting both split-height-threshold and split-width-threshold to nil seems to ensure this.
  ;; https://github.com/SophieBosio/.emacs.d
  (setq-default split-height-threshold nil
                split-width-threshold  nil
                fill-column            80) ;; Maximum line width
  ;; window-min-width       80) ;; No smaller windows than this
    #+end_src
** Functions for custom bindings
#+begin_src emacs-lisp
  ;; Reload config
  (defun amo/reload-config ()
    "Reload configuration"
    (interactive)
    (persp-state-save)
    (load-file (concat user-emacs-directory "init.el")))

  ;; Delete perspectives and customization file and restart emacs
  (defun amo/delete-emacs-perspective-file-restart ()
    "Delete saved desktop, then restart emacs"
    (interactive)
    (delete-file (concat user-emacs-directory "customize.el"))
    (persp-switch "main")
    (persp-kill-others)
    (restart-emacs))

  (defun amo/split-window (arg side)
    "Create a new window on SIDE.
  Universal argument will split based off root window.
  Double universal argument will split based off of window parent
  Also balance windows and move point to new window"
    (interactive "p")
    (split-window
     (cond
      ((= arg 4) (frame-root-window))
      ((= arg 16) (window-parent (selected-window)))
      ((= arg 1) (selected-window)))
     nil side nil)
    (balance-windows)
  (other-window 1))

  (defun amo/delete-window ()
    "Balance windows after deleting one"
    (interactive)
    (delete-window)
    (balance-windows))

  (defun amo/open-main-notes-file ()
    "Open main notes file"
    (interactive)
    (find-file (concat org-directory "/notes.org")))

  (defun amo/open-notes-directory ()
    "Open notes directory"
    (interactive)
    (find-file org-directory))
#+end_src

** Custom Bindings
#+begin_src emacs-lisp

  ;; Custom prefix C-z
  (global-set-key (kbd "C-z r") 'amo/reload-config)
  (global-set-key (kbd "C-z C-z r") 'restart-emacs)
  (global-set-key (kbd "C-z C-z C-z r") 'amo/delete-emacs-perspective-file-restart)
  (global-set-key (kbd "C-z t") 'consult-theme)
  (global-set-key (kbd "C-z C-z t") 'customize-themes)
  (global-set-key (kbd "C-z e") 'eshell)
  (global-set-key (kbd "C-z n") 'amo/open-main-notes-file)
  (global-set-key (kbd "C-z C-z n") 'amo/open-notes-directory)

  ;; Other bindings
  (global-set-key (kbd "C-x 0") 'amo/delete-window)
  (global-set-key (kbd "C-x 2") (lambda (arg) (interactive "p") (amo/split-window arg 'below)))
  (global-set-key (kbd "C-x 3") (lambda (arg) (interactive "p") (amo/split-window arg 'right)))
  (global-set-key (kbd "M-<down>") 'amo/move-line-down)
  (global-set-key (kbd "M-<up>") 'amo/move-line-up)
  (global-set-key (kbd "C-'") 'amo/toggle-capitalization)
  (global-set-key (kbd "C-s-p") 'scroll-down-line)
  (global-set-key (kbd "C-s-n") 'scroll-up-line)
  (global-set-key (kbd "C-x K") 'kill-buffer-and-window)
  (global-set-key (kbd "M-SPC") 'cycle-spacing)

#+end_src

** Functions for hooks
#+begin_src emacs-lisp
  ;; Don't auto-complete when we are debugging
  (defun amo/comint-mode-actions ()
    (setq-local corfu-auto nil) [])

  ;; Cleanup whitespace
  (defun amo/whitespace-cleanup ()
    (whitespace-cleanup)
    (delete-trailing-whitespace))
  #+end_src

** Hooks
#+begin_src emacs-lisp
  (add-hook 'comint-mode-hook 'amo/comint-mode-actions)
  (add-hook 'focus-out-hook 'garbage-collect)
  #+end_src

** ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :bind (:map ibuffer-mode-map
                ("C-o" . nil)))
#+end_src
* Programming
** Packages
*** treesit-auto
- Repo :: https://github.com/renzmann/treesit-auto
- Description :: Automatic installation, usage, and fallback for tree-sitter major modes in Emacs
#+begin_src emacs-lisp
  (use-package treesit-auto
    :straight t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
*** Eglot
- Repo :: https://github.com/joaotavora/eglot
- Description :: A client for Language Server Protocol servers
#+begin_src emacs-lisp
  (defun amo/eglot-format-on-save ()
    (when (and (not (or (eq major-mode 'java-ts-mode)))
               (bound-and-true-p eglot--managed-mode))
      (eglot-format)))

  (use-package eglot
    :straight t
    :defer t
    :config
    (setq eglot-ignored-server-capabilites '(:documentHighlightProvider))
    (add-to-list 'eglot-server-programs
                 `((java-mode java-ts-mode) .
                   ("jdtls"
                    :initializationOptions
                    (:bundles [,(dot-env-get 'JAVA_DEBUG_SERVER_PATH)]))))
    :hook ((after-save . amo/eglot-format-on-save)
           (python-ts-mode . eglot-ensure)
           (bash-ts-mode . eglot-ensure)
           (json-ts-mode . eglot-ensure)
           (go-ts-mode . eglot-ensure)
           (haskell-mode . eglot-ensure)
           (rust-ts-mode . eglot-ensure)
           (vue-mode . eglot-ensure)
           (java-ts-mode . eglot-ensure)
           (c-ts-mode . eglot-ensure)
           (c++-ts-mode . eglot-ensure))
    :bind (:map eglot-mode-map
                ("<C-return>" . xref-find-references)
                ("C-c e f" . consult-flymake)
                ("C-c e r" . eglot-rename)
                ("C-c e a" . eglot-code-actions)
                ("C-c e c" . compile)
                ("C-c e w r" . eglot-reconnect)
                ("C-c e w k" . eglot-shutdown)))
#+end_src

*** Dape
- Repo :: https://github.com/svaante/dape
- Description :: Debug Adapter Protocol for Emacs
#+begin_src emacs-lisp
  (use-package dape
    :straight t
    :config
    (setq dape-buffer-window-arrangement 'right)
    (setq dape-cwd-fn 'projectile-project-root))
#+end_src
*** imenu-list
- Repo :: https://github.com/bmag/imenu-list
- Description :: Emacs plugin to show the current buffer's imenu entries in a separate buffer
#+begin_src emacs-lisp
  (use-package imenu-list
    :straight t
    :config
    (setq imenu-list-focus-after-activation t
          imenu-list-position 'left
          imenu-list-auto-resize t)
    :bind (("M-i" . imenu-list-smart-toggle)))
#+end_src

** Languages
*** Docker
**** dockerfile-mode
- Repo :: https://github.com/spotify/dockerfile-mode
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :straight t)
#+end_src
**** docker-compose-mode
- Repo :: https://github.com/meqif/docker-compose-mode
#+begin_src emacs-lisp
  (use-package docker-compose-mode
    :straight t)
#+end_src
*** Golang
**** go-ts-mode
#+begin_src emacs-lisp
  (use-package go-ts-mode
    :hook (go-ts-mode . (lambda () (setq-local tab-width 4
                                               electric-indent-inhibit t))))
#+end_src
*** Haskell
**** haskell-mode
- Repo :: https://github.com/haskell/haskell-mode
- Description :: Emacs mode for Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight t
    :config (setq haskell-interactive-popup-errors nil)
    :hook (haskell-mode . (lambda () (interactive-haskell-mode t))))
#+end_src
*** Python
**** python-ts-mode
#+begin_src emacs-lisp
  (use-package emacs
    :hook (python-ts-mode . (lambda () (setq-local tab-width 4))))
#+end_src
**** interpreter
#+begin_src emacs-lisp
  (when (executable-find "ipython")
    (setq python-shell-interpreter "ipython"))
#+end_src

**** conda
- Repo :: https://github.com/necaris/conda.el
- Description :: Emacs helper library (and minor mode) to work with conda environments
#+begin_src emacs-lisp
  (use-package conda
    :straight t
    :init
    (setq conda-anaconda-home (expand-file-name (dot-env-get 'CONDA_PATH "~/opt/miniconda3"))
          conda-env-home-directory (expand-file-name (dot-env-get 'CONDA_PATH "~/opt/miniconda3"))
          conda-env-autoactivate-mode t)
    (add-hook 'find-file-hook (lambda () (when (bound-and-true-p conda-project-env-path)
                                           (conda-env-activate-for-buffer))))
    (setq-default mode-line-format (cons '(:exec conda-env-current-name) mode-line-format)))
#+end_src
**** pyvenv
- Repo :: https://github.com/jorgenschaefer/pyvenv
- Description :: Python virtual environment interface for Emacs
#+begin_src emacs-lisp
  (use-package pyvenv
    :straight t
    :diminish
    :config
    (setq pyvenv-mode-line-indicator
          '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
    (pyvenv-mode +1))
#+end_src

*** Java
**** eglot-java
- Repo :: https://github.com/yveszoundi/eglot-java
- Description :: Java extension for the eglot LSP client
#+begin_src emacs-lisp
  (use-package eglot-java
    :straight t
    :bind
    (("C-c l n" . eglot-java-file-new)
     ("C-c l x" . eglot-java-run-main)
     ("C-c l t" . eglot-java-run-test)
     ("C-c l N" . eglot-java-project-new)
     ("C-c l T" . eglot-java-project-build-task)
     ("C-c l R" . eglot-java-project-build-refresh)))
#+end_src
*** Jinja2
- Repo :: https://github.com/paradoxxxzero/jinja2-mode
- Description :: Jinja2 mode for emacs
#+begin_src emacs-lisp
  (use-package jinja2-mode
    :straight t)
#+end_src
*** SuperCollider
- Repo :: https://github.com/supercollider/scel
- Description :: Supercollider emacs package
#+begin_src emacs-lisp
  (when (executable-find "sclang")
    (require 'sclang))
#+end_src

*** Vue
- Repo :: https://github.com/AdamNiederer/vue-mode
- Description :: Emacs major mode for vue.js
#+begin_src emacs-lisp
  (use-package vue-mode
    :straight t)
#+end_src
* Version Control
** Magit
- Repo :: https://github.com/magit/magit
- Docs :: https://magit.vc/
- Description :: It's Magit! A Git Porcelain inside Emacs.
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind
    (("C-x g" . magit))
    :after nerd-icons
    :custom
    (magit-format-file-function #'magit-format-file-nerd-icons))
#+end_src
** magit-todos
- Repo :: https://github.com/alphapapa/magit-todos
- Description :: Show source files' TODOs (and FIXMEs, etc) in Magit status buffer
#+begin_src emacs-lisp
  (use-package magit-todos
    :straight t
    :hook ((magit-mode . magit-todos-mode)))
#+end_src
** git-messenger
- Repo :: https://github.com/emacsorphanage/git-messenger
- Description :: Emacs Port of git-messenger.vim
#+begin_src emacs-lisp
  (use-package git-messenger
    :straight t
    :config (setq git-messenger:show-detail t
                  git-messenger:use-magit-popup t)
    :bind ("C-x m" . git-messenger:popup-message))
#+end_src
** Git time machine
- Repo :: https://github.com/emacsmirror/git-timemachine
- Description :: Walk through git revisions of a file
#+begin_src emacs-lisp
  (use-package git-timemachine
    :straight t)
#+end_src
** diff-hl
- Repo :: https://github.com/dgutov/diff-hl
- Description :: Emacs package for highlighting uncommitted changes
#+begin_src emacs-lisp
  (use-package diff-hl
    :straight t
    :config
    (global-diff-hl-mode)
    :hook
    ((dired-mode . diff-hl-dired-mode)
     (magit-pre-refresh . diff-hl-magit-pre-refresh)
     (magit-post-refresh . diff-hl-magit-post-refresh))
    :bind
    (("C-c e n" . diff-hl-show-hunk-next)
     ("C-c e p" . diff-hl-show-hunk-previous)))
#+end_src
** emsg-blame
- Repo :: https://github.com/ISouthRain/emsg-blame
- Description :: A simple, fast, asynchronous, customizable display, view of git blame commit in Emacs.
#+begin_src emacs-lisp
  (use-package emsg-blame
    :straight (:host github :repo "ISouthRain/emsg-blame")
    :config
    (global-emsg-blame-mode)
    (defun my--emsg-blame-display ()
      (message " %s • %s • %s" emsg-blame--commit-author emsg-blame--commit-date emsg-blame--commit-summary))
    (setq emsg-blame-display #'my--emsg-blame-display
          ;; Prevent eldoc from overwritting message buffer output from this package
          eldoc-message-function '(lambda (format-string &rest args) ())))
#+end_src
* Minibuffer & Completion
** consult-projectile
- Repo :: https://github.com/emacsmirror/consult-projectile
- Description :: Consult integration for projectile
#+begin_src emacs-lisp
  (use-package consult-projectile
    :straight t
    :config
    (define-key projectile-command-map (kbd "h") #'consult-projectile)
    (define-key projectile-command-map (kbd "f") #'consult-projectile-find-file)
    (define-key projectile-command-map (kbd "d") #'consult-projectile-find-dir)
    (define-key projectile-command-map (kbd "p") #'consult-projectile-switch-project)
    (define-key projectile-command-map (kbd "b") #'consult-projectile-switch-to-buffer))
#+end_src

** consult-eglot
- Repo :: https://github.com/mohkale/consult-eglot
- Description :: Jump to workspace symbols with eglot and consult
  #+begin_src emacs-lisp
    (use-package consult-eglot
      :straight t)
  #+end_src
** Corfu
- Repo :: https://github.com/minad/corfu
- Description :: corfu.el - COmpletion in Region FUnction
#+begin_src emacs-lisp
  (use-package corfu
    :straight (:files (:defaults "extensions/*"))
    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode 1)
    (corfu-echo-mode 1)
    :custom (setq corfu-quit-at-boundary t)
    :config (setq corfu-auto t
                  corfu-auto-prefix 1
                  corfu-quit-no-match t
                  corfu-popupinfo-delay '(1.0 . 0.5)))

  ;; A few more useful configurations...
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)
#+end_src

* Org Mode
** Org configuration
- Docs :: https://orgmode.org/
- Description :: A GNU Emacs major mode for keeping notes, authoring documents, computational notebooks, literate programming, maintaining to-do lists, planning projects, and more — in a fast and effective plain text system.
#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-directory (dot-env-get 'ORG_DIRECTORY
                                     (concat user-emacs-directory "org-directory"))
          org-agenda-files (directory-files-recursively org-directory "\\.org$")
          org-notes-file (concat org-directory "/notes.org")
          org-lists-file (concat org-directory "/lists.org")
          org-archive-location (concat org-directory "/_archive/%s_archive::")
          org-yank-folded-subtrees nil

          ;; Increase size of latex previews
          org-format-latex-options (plist-put org-format-latex-options :scale 1.4))

    (defun amo/org-mode-hook ()
      (org-indent-mode 1)
      (visual-line-mode 1))

    (defun amo/org-mode-agenda-hook ()
      "For some reason the org-agenda-files var is never set"
      (setq org-agenda-files (directory-files-recursively org-directory "\\.org$")))

    (advice-add
     'org-agenda
     :before
     (lambda (&rest r) (amo/org-mode-agenda-hook)))

    :hook
    (org-mode . amo/org-mode-hook)

    :bind
    (("C-c c" . org-capture)
     ("C-c a" . org-agenda)
     ("C-c h" . consult-org-heading))

    :custom
    (setq org-use-tag-inheritance t)
    (org-hide-emphasis-markers t)
    (org-list-demote-modify-bullet
     '(("-" . "+") ("+" . "*") ("*" . "-")))
    (org-list-allow-alphabetical t)
    (org-M-RET-may-split-line '((default . nil)))
    (org-capture-templates
     '(("n"
        "Note"
        entry
        (file org-notes-file)
        "** %?\n%T\n%i\n" :empty-lines-after 1 :prepend t)
       ("t"
        "Todo"
        checkitem
        (file+headline org-notes-file "General Todos")
        "[ ] %T %?\n%i\n" :empty-lines-after 1)
       ("e"
        "Emacs Idea"
        checkitem
        (file+headline org-lists-file "Emacs Ideas")
        "[ ] %?" :prepend t)
       ("k"
        "Keyboard Idea"
        checkitem
        (file+headline org-lists-file "Keyboard Ideas")
        "[ ] %?" :prepend t)
       ("r"
        "Interesting Albums"
        item
        (file+headline org-lists-file "Interesting Albums")
        "%?"))))

  (use-package ox-gfm
    :straight t
    :config
    (eval-after-load "org"
      '(require 'ox-gfm nil t)))
#+end_src

** Org-roam
- Repo :: https://github.com/org-roam/org-roam
- Docs :: https://www.orgroam.com/manual.html
- Description :: Rudimentary Roam replica with Org-mode
  #+begin_src emacs-lisp
    (use-package org-roam
      :straight t
      :after org
      :init
      ;; to prevent "non-prefix key" error
      (define-key global-map (kbd "C-c n") (make-sparse-keymap))

      :config
      (setq org-roam-directory (dot-env-get 'ORG_ROAM_DIRECTORY (concat org-directory "/org-roam"))
            org-roam-node-display-template
            (concat "${title:*} "
                    (propertize "${tags:60}" 'face 'org-tag))
            org-roam-capture-templates
            `(("d" "default" plain "%?"
               :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                  "#+title: ${title}\n#+category: ${title}\n")
               :unnarrowed t
               :empty-lines 1)))
      (org-roam-db-autosync-mode)
      (add-hook 'after-save-hook (lambda () (if (org-roam-file-p) (org-roam-db-sync))))

      :bind (("C-c n i" . org-roam-node-insert)
             ("C-c n f" . org-roam-node-find)
             ("C-c n c" . org-roam-capture)
             ("C-c n b" . org-roam-buffer-toggle)
             ("C-c n d" . org-roam-buffer-display-dedicated)
             ("C-c n t" . org-roam-tag-add)
             ("C-c n r" . org-roam-tag-remove)
             ("C-c n a" . org-roam-alias-add)
             ("C-c n u" . org-id-get-create)))
  #+end_src
** consult-org-roam
- Repo :: https://github.com/jgru/consult-org-roam
- Description :: A bunch of convenience functions for operating org-roam with the help of consult
  #+begin_src emacs-lisp
    (use-package consult-org-roam
      :straight t
      :after org-roam
      :init
      (consult-org-roam-mode 1)

      :custom
      (consult-org-roam-grep-func #'consult-ripgrep)
      (consult-org-roam-buffer-narrow-key ?r)
      (consult-org-roam-buffer-after-buffers t)

      :config
      (consult-customize
       consult-org-roam-forward-links
       :preview-key "M-."))
  #+end_src
** Org Modern
- Repo :: https://github.com/minad/org-modern
- Description :: 🦄 Modern Org Style
  #+begin_src emacs-lisp
    (use-package org-modern
      :straight t
      :config (with-eval-after-load 'org (global-org-modern-mode)))
  #+end_src
** org-appear
- Repo :: https://github.com/awth13/org-appear
- Description :: Toggle visibility of hidden Org mode element parts upon entering and leaving an element
#+begin_src emacs-lisp
  (use-package org-appear
    :straight (:type git :host github :repo "awth13/org-appear")
    :hook (org-mode . org-appear-mode))
#+end_src
** org-fragtog
- Repo :: https://github.com/io12/org-fragtog
- Description :: Automatically toggle Org mode LaTeX fragment previews as the cursor enters and exits them
#+begin_src emacs-lisp
  (use-package org-fragtog
    :straight t
    :hook ((org-mode . org-fragtog-mode)))
#+end_src
* Other Useful Packages
** buffer-move
- Repo :: https://github.com/lukhas/buffer-move
- Description :: Easily swap buffers
#+begin_src emacs-lisp
  (use-package buffer-move
    :straight t
    :bind
    (("<C-S-up>" . buf-move-up)
     ("<C-S-down>" . buf-move-down)
     ("<C-S-left>" . buf-move-left)
     ("<C-S-right>" .  buf-move-right)
     :map org-mode-map
     ("<C-S-up>" . buf-move-up)
     ("<C-S-down>" . buf-move-down)
     ("<C-S-left>" . buf-move-left)
     ("<C-S-right>" . buf-move-right)))
#+end_src

** exec-path-from-shell
- Repo :: https://github.com/purcell/exec-path-from-shell
- Description :: Make Emacs use the $PATH set up by the user's shell
#+begin_src emacs-lisp
  (when (memq window-system '(mac ns x)) ;; Linux
    (use-package exec-path-from-shell
      :straight t
      :config
      (exec-path-from-shell-initialize)))
#+end_src
** ESUP
- Repo :: https://github.com/jschaf/esup
- Description :: ESUP - Emacs Start Up Profiler
#+begin_src emacs-lisp
  (use-package esup
    :straight t
    :config
    (setq esup-depth 0))
#+end_src
** flymake-margin
- Repo :: https://github.com/LionyxML/flymake-margin
- Description :: A package to provide flymake into the margin world
#+begin_src emacs-lisp
  (use-package flymake-margin
    :straight (margin :type git
                      :host github
                      :repo "LionyxML/flymake-margin"
                      :files ("*.el"))
    :after flymake
    :config
    (flymake-margin-mode t))
#+end_src

** gptel
- Repo :: https://github.com/karthink/gptel
- Description :: A no-frills ChatGPT client for Emacs
#+begin_src emacs-lisp
  (use-package gptel
    :straight t
    :init
    (define-key global-map (kbd "C-c g") (make-sparse-keymap))
    (setq gptel-directives '((default
                         . "You are a large language model and a conversation partner.")
                        (programming
                         . "You are a large language model and a careful programmer. Provide code and only code as output without any additional text, prompt or note. Make sure any code in your responses is properly formatted and has easy to read syntax highlighting appropriate for the specific language used.")
                        (writing
                         . "You are a large language model and a writing assistant.")
                        (chat
                         . "You are a large language model and a conversation partner.")))
    :config
    (setq
     gptel-default-mode #'org-mode
     gptel-model (intern (dot-env-get 'GPTEL_MODEL "mistral:latest"))
     gptel-backend (gptel-make-ollama "Ollama"
                     :host "localhost:11434"
                     :stream t
                     :models (mapcar #'intern (split-string(dot-env-get 'LOCAL_LLMS "mistral:latest"))))
     )
    :bind (("C-c g g" . gptel)
           ("C-c g s" . gptel-send)
           ("C-c g m" . gptel-menu)
           ("C-c g r" . gptel-rewrite)
           ("C-c g a" . gptel-add)
           ("C-c g k" . gptel-abort))
    :hook ((gptel-mode . visual-line-mode)
           (gptel-post-stream . gptel-auto-scroll)
           (gptel-post-response-functions . gptel-end-of-response)))
#+end_src

** helpful
- Repo :: https://github.com/Wilfred/helpful
- Description :: A better Emacs *help* buffer
#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :bind (("C-S-h f" . helpful-callable)
           ("C-S-h v" . helpful-variable)
           ("C-S-h o" . helpful-symbol)
           ("C-S-h k" . helpful-key)
           ("C-S-h x" . helpful-command)
           ("C-S-h d" . helpful-at-point)
           ("C-S-h F" . helpful-function)))
#+end_src
** markdown-mode
- Repo :: https://github.com/jrblevin/markdown-mode
- Description :: Emacs Markdown Mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src
** package-lint
- Repo :: https://github.com/purcell/package-lint
- Description :: A linting library for elisp package metadata
#+begin_src emacs-lisp
  (use-package package-lint
    :straight t)
#+end_src
** perspective-el
- Repo :: https://github.com/nex3/perspective-el
- Description :: Perspectives for Emacs.
#+begin_src emacs-lisp
  (use-package perspective
    :straight t
    :custom
    (persp-mode-prefix-key (kbd "C-c C-w"))
    (persp-state-default-file (concat user-emacs-directory ".perspective"))
    :init
    (persp-mode)
    (persp-state-load (concat user-emacs-directory ".perspective"))
    :config
    (setq switch-to-prev-buffer-skip
          (lambda (win buff bury-or-kill)
            (not (persp-is-current-buffer buff)))
          persp-show-modestring t
          persp-modestring-short t)
    (consult-customize consult--source-buffer :hidden t :default nil)
    (add-to-list 'consult-buffer-sources persp-consult-source)
    :hook ((kill-emacs . persp-state-save)
           (restart-emacs . persp-state-save))
    :bind (("C-x C-b" . persp-ibuffer)
           :map perspective-map
           ("," . persp-rename)
           ("." . persp-switch)
           ("'" . persp-switch-last)
           ("\"" . persp-kill)))
#+end_src
** Popper
- Repo :: https://github.com/karthink/popper
- Description :: Emacs minor-mode to summon and dismiss buffers easily
#+begin_src emacs-lisp
  (use-package popper
    :straight t
    :bind (("s-3" . popper-toggle)
           ("s-4" . popper-cycle)
           ("s-5" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*format-all-errors\\*"
            "\\*cider-error\\*"
            "\\*cider-scratch\\*"
            "\\*Messages\\*"
            "\\*helpful"
            "\\*Warnings\\*"
            "\\*Compile-Log\\*"
            "\\*Completions\\*"
            "\\*Backtrace\\*"
            "\\*TeX Help\\*"
            "\\*Org Select\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            "\\*eldoc\\*"
            "\\*Geiser Debug\\*"
            "^pop-"
            help-mode
            compilation-mode)
          popper-mode-line ""

          ;; Make popper buffers 1/2 window height
          popper-window-height (lambda (win)
                                 (fit-window-to-buffer
                                  win
                                  (floor (frame-height) 2))))
    (popper-mode +1)
    (popper-echo-mode +1)
    (defun amo/add-popper-status-to-modeline ()
      "If buffer is a popper-type buffer, display POP in the modeline,
    in a doom-modeline friendly way"
      (if (popper-display-control-p (buffer-name))
          (add-to-list 'mode-line-misc-info "POP")
        (setq mode-line-misc-info (remove "POP" mode-line-misc-info))))
    (add-hook 'buffer-list-update-hook 'amo/add-popper-status-to-modeline))
#+end_src
** Projectile
- Repo :: https://github.com/bbatsov/projectile
- Docs :: https://docs.projectile.mx/projectile/index.html
- Description :: Project navigation and management library for Emacs
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-global-mode)
    (setq projectile-indexing-method 'alien
          projectile-ignored-projects '("~/"))
    :bind (("s-p" . projectile-command-map)
           ("C-c p" . projectile-command-map)))
#+end_src
** ESS
- Repo :: https://github.com/emacs-ess/ESS
- Docs :: https://ess.r-project.org/
- Description :: Emacs Speaks Statistics: ESS
#+begin_src emacs-lisp
  (use-package ess
    :straight t)
#+end_src
** rainbow-delimiters
- Repo :: https://github.com/Fanael/rainbow-delimiters
- Description :: A "rainbow parentheses"-like mode which highlights delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Transpose Frame
- Docs :: https://www.emacswiki.org/emacs/TransposeFrame
- Description :: Interactive functions to transpose window arrangement in current frame
#+begin_src emacs-lisp
  (use-package transpose-frame
    :straight t
    :bind (("C->" . transpose-frame)))
#+end_src
** YASnippet
- Repo :: https://github.com/joaotavora/yasnippet
- Description :: A template system for Emacs
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :hook ((python-ts-mode . (lambda () (yas-activate-extra-mode 'python-mode))))
    :config
    (yas-global-mode)
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets")) ;TODO: Don't hardcode
    (use-package yasnippet-snippets
      :straight t))
#+end_src

* Appearance
** Doom Modeline
- Repo :: https://github.com/seagle0128/doom-modeline
- Description :: A fancy and fast mode-line inspired by minimalism design
#+begin_src emacs-lisp
  (straight-use-package '(f :type git :host github :repo "rejeep/f.el"))
  (use-package doom-modeline
    :straight t
    :after f
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-minor-modes t
          doom-modeline-vcs-max-length 40
          doom-modeline-buffer-encoding t
          doom-modeline-persp-name t
          doom-modeline-total-line-number t
          doom-modeline-display-default-persp-name nil
          doom-modeline-vcs-display-function #'doom-modeline-vcs-name
          doom-modeline-persp-icon t))
#+end_src
** Ef Themes
- Repo :: https://github.com/protesilaos/ef-themes
- Description :: Colourful and legible themes for GNU Emacs
#+begin_src emacs-lisp
  (use-package ef-themes
    :straight t)
#+end_src

** Modus Themes
- Repo :: https://github.com/protesilaos/modus-themes
- Description :: Highly accessible themes for GNU Emacs
#+begin_src emacs-lisp
  (use-package modus-themes
    :straight t)
#+end_src

** nerd-icons-corfu
- Repo :: https://github.com/LuigiPiucco/nerd-icons-corfu
- Description :: Icons for corfu via nerd-icons
#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :straight t)
#+end_src
